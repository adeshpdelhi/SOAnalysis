				), along with zero or more bytes for passing parameters.
Of the 255 possible byte-long 
The Java bytecode system does not directly support floating point operations beyond 32 bits, except indirectly via bytecodes that enable use of 64-bit and 80-bit intermediate IEEE floating point operations.


A 
Instructions fall into a number of broad groups:
There are also a few instructions for a number of more specialized tasks such as exception throwing, synchronization, etc.
Many instructions have prefixes and/or suffixes referring to the types of operands they operate on. These are as follows:
For example, "iadd" will add two integers, while "dadd" will add two doubles. The "const", "load", and "store" instructions may also take a suffix of the form "_ for "const" differs by type.
The "const" instructions push a value of the specified type onto the stack. For example, "iconst_5" will push an integer 5 to load from or store to. The "aload_0" instruction pushes the object in variable 0 onto the stack (this is usually the "this" object). "istore_1" stores the integer on the top of the stack into variable 1. For variables with higher numbers the suffix is dropped and operands must be used.
Consider the following Java code:
A Java compiler might translate the Java code above into byte code as follows, assuming the above was put in a method:
The most common language targeting  to Java bytecode; but because all the specifications for Java bytecode are now available, other parties have supplied compilers that produce Java bytecode. Examples of other compilers include:
Some projects provide Java assemblers to enable writing Java bytecode by hand. Assembly code may be also generated by machine, for example by a compiler targeting a . Notable Java assemblers include:
Others have developed compilers, for different programming languages, in order to target the Java virtual machine, such as:
There are several machines available today, both free and commercial products.
If executing Java bytecode in a Java virtual machine is not desirable, a developer can also compile Java source code or Java bytecode directly to native machine code with tools such as the .
The 
 opcode.
