This article compares two .
C# and Java are similar languages that are .


Both languages are statically typed with class-based object orientation. In Java the . Note, that unlike Java, this allows C# to support objects with encapsulation that are not reference types.
In Java, compound types are synonymous with reference types; methods cannot be defined for a type unless it is also a  and specialization, however.
Both languages support many  in C#. The primitive/simple types typically have native support from the underlying processor architecture.
The C# primitive/simple types implement several interfaces and consequently offer many methods directly on instances of the types, even on the literals. The C# type names are also merely  type; the only difference is that the former is the canonical .NET name, while the latter is a C# alias for it.
Java does not offer methods directly on primitive types. Instead, methods that operate on primitive values are offered through companion  the same type, however.
Both Java and C# support  (signed byte) in C#.
C# supports  as a result; not a long or signed integer.
Java does not feature unsigned integer types. In particular, Java lacks a primitive type for an unsigned 
Unsigned integers were left out of Java deliberately because  believed that programmers would not understand how unsigned arithmetic works.
In programming language design, one of the standard problems is that the language grows so complex that nobody can understand it. One of the little experiments I tried was asking people about the rules for unsigned arithmetic in C. It turns out nobody understands how unsigned arithmetic in C works. There are a few obvious things that people understand, but many people don't understand it.
C# has a type and literal notation for high-precision (28 decimal digits) decimal arithmetic that is appropriate for financial and monetary calculations.
While Java lacks such a built-in type, the Java library does feature an .
Both languages offer library-defined  types for arbitrary-size integers and decimal point calculations.
Only Java has a data type for arbitrary precision decimal point calculations. Only C# has a type for working with .
In both languages, the number of operations that can be performed on the advanced numeric types are limited compared to the built-in .
C# allows library-defined types to be integrated with existing types and operators by using custom implicit/explicit conversions and operator overloading. See example in section 
Both languages feature a native  value to an integer value before the operation. Thus, the result of a bitwise operation is a numeric type, not a character, in both languages.
Both languages treat  are considered an external feature and are implemented in separate classes.
Both languages' libraries define classes for working with dates and calendars in different cultures. The Java  type for working with time periods. Both languages support date and time arithmetic according to different cultures.
C# allows the programmer to create user-defined ), or stored in an array without the memory indirection that normally exists for class types.
Because value types have no notion of a  (and frequently do) implement interfaces. For example, the built-in integer types implement several interfaces.
Apart from the built-in primitive types, Java does not include the concept of value types.
Both languages define enumerations, but they are implemented in fundamentally different ways. As such, enumerations are one area where tools designed to automatically translate code between the two languages (such as Java to C# converters) fail.
C# has implemented enumerations in a manner similar to C, that is as wrappers around the bit-flags implemented in primitive integral types (int, byte, short, etc.). This has performance benefits and improves interaction with C/C++ compiled code, but provides fewer features and can lead to bugs, if low-level value types are directly cast to an enumeration type, as is allowed in the C# language. Therefore, it is seen as  In contrast, Java implements enumerations as full featured collection of instances, requiring more memory and not aiding interaction with C/C++ code, but providing additional features in reflection and intrinsic behavior. The implementation in each language is described in the table below.
In both C# and Java, programmers can use enumerations in a 
C# implements object-oriented method pointers in the form of .
Delegates should not be confused with closures and inline functions. The concepts are related because a reference to a closure/inline function must be captured in a delegate reference to be useful at all. But a delegate does not always reference an inline function; it can also reference existing static or instance methods. Delegates form the basis of C# , but should not be confused with those either.
Delegates were deliberately left out of Java because they were considered unnecessary and detrimental to the language, and because of potential performance issues.
See also example .
C# allows value/primitive/simple types to be "lifted" to allow the special . Also, lifted operators are implicitly and automatically defined based on their non-lifted base, where — with the exception of some boolean operators — a null argument will propagate to the result.
Java does not support type lifting as a concept, but all of the built-in primitive types have corresponding wrapper types, which do support the  value by virtue of being reference types (classes).
According to the Java spec, any attempt to dereference the : the program will throw an exception, because there is no object to be unboxed - and thus no boxed value to take part in the subsequent computation.
The following example illustrates the different behavior. In C#, the lifted*operator propagates the  value of the operand; in Java, unboxing the null reference throws an exception.
Not all C# lifted operators have been defined to propagate .
The Java boolean operators do not support ternary logic, nor is it implemented in the base class library.
C# features a  type resolves member access dynamically at runtime as opposed to statically/virtual at compile time. The member lookup mechanism is extensible with traditional reflection as a fall-back mechanism.
There are several use cases for the  type in C#:
Java does not support a late-bound type. The use cases for C# dynamic type have different corresponding constructs in Java:
See also example .
Java precludes pointers and pointer-arithmetic within the Java runtime environment. The Java language designers reasoned that pointers are one of the main features that enable programmers to put bugs in their code and chose not to support them. layer.
While C# does allow use of  switch are marked as such and may only execute, if explicitly trusted. This allows using pointers and pointer arithmetic to directly pass and receive objects to/from the operating system or other native APIs using the native memory layout for those objects, while at the same time isolating such potentially unsafe code in specifically trusted assemblies.
In both languages .
While not directly evident in the language syntax . An instance that is only referenced by weak references is eligible for garbage collection just as if there were no references at all. In both languages this feature is exposed through the associated libraries, even though it is really a core runtime feature.
Along with weak references, Java has . They are much like weak references, but the JVM will not deallocate softly-referenced objects until the memory is needed.
 are concepts featured by both languages.
The syntax used to declare and access arrays is identical, except that C# has added syntax for declaring and manipulating multidimensional arrays.
Multidimensional arrays can in some cases increase performance because of increased  (as there is one pointer dereference instead of one for every dimension of the array, as it is the case for jagged arrays). However, since all array element access in a multidimensional array requires multiplication/shift between the two or more dimensions, this is an advantage only in very random access scenarios.
Another difference is that the entire multidimensional array can be allocated with a single application of operator , while jagged arrays require loops and allocations for every dimension. Note, though, that Java provides a syntactic construct for allocating a jagged array with regular lengths; the loops and multiple allocations are then performed by the virtual machine and need not be explicit at the source level.
Both languages feature an extensive set of collection types that includes various ordered and unordered types of lists, maps/dictionaries, sets, etc.
Java also supports the syntax of C/C++:
Both languages allow 
In C#, the primitive types are subtypes of the Object type. In Java this is not true; any given primitive type and the corresponding wrapper type have no specific relationship with each other, except for autoboxing and unboxing, which act as 
This difference has the following consequences. First of all, in C#, primitive types can define methods, such as an override of Object's 
Secondly, in Java an extra cast is needed whenever one tries to directly .
Finally, another difference is that Java makes heavy use of boxed types in ).
Both languages are considered "curly brace" languages in the C/C++ family. Overall the syntaxes of the languages are very similar. The syntax at the statement and expression level is almost identical with obvious inspiration from the C/C++ tradition. At type definition level (classes and interfaces) some minor differences exist. Java is explicit about extending classes and implementing interfaces, while C# infers this from the kind of types a new class/interface derives from.
C# supports more features than Java, which to some extent is also evident in the syntax that specifies more keywords and more grammar rules than Java.
As the languages evolved, the language designers for both languages have faced situations where they wanted to extend the languages with new keywords or syntax. New keywords in particular may break existing code at source level, i.e. older code may no longer compile, if presented to a compiler for a later version of the language. Language designers are keen to avoid such regressions. The designers of the two languages have been following different paths when addressing this problem.
Java language designers have avoided new keywords as much as possible, preferring instead to introduce new syntactic constructs that were not legal before or to reuse existing keywords in new contexts. This way they didn't jeopardize backward compatibility. An example of the former can be found in how the  as a keyword when compiling as Java 1.4 and later, 3) Defaulting to 1.3 to avoid rendering previous (non 1.4 aware code) invalid and 4) Issue warnings, if the keyword is used in Java 1.3 mode, in order to allow the developers to change the code.
C# language designers have introduced several new keywords since the first version. However, instead of defining these keywords as  keywords in C# 2.0, the use of those words as identifiers is still valid as there is no clash possible between the use as keyword and the use as identifier, given the context. Thus, the present C# syntax is fully backward compatible with source code written for any previous version without specifying the language version to be used.
In Java SE 7 a similar construct has been added called try-with-resources:
Both C# and Java are designed from the ground up as ). Neither language is a superset of C or C++, however.
C# allows a class definition to be split across several source files using a feature called  dependencies among its parts as they are guaranteed to be resolved at compile time. Java has no corresponding concept.
Both languages allow , where a class is defined lexically inside another class. However, in each language these inner classes have rather different semantics.
In Java, unless the inner class is declared . This can be done in any class that has a reference to an instance of the outer class.
In C#, an inner class is conceptually the same as a normal class. In a sense, the outer class only acts as a namespace. Thus, code in the inner class cannot access non-static members of the outer class unless it does so through an explicit reference to an instance of the outer class. Programmers can declare the inner class  to allow only the outer class to have any access to it.
Java provides another feature called  for more about this.
C# also provides a feature called .
C# multicast-delegates are used with . To support this there is a specific syntax to define events in classes, and operators to register, unregister or combine event handlers.
See  for information about how events are implemented in Java.

Java does not include operator overloading, nor custom conversions in order to prevent abuse of the feature and to keep the language simple.
C# also includes  that uses one or more parameters (indexes); the indices can be objects of any type:
Java does not include indexers. The common Java pattern involves writing explicit getters and setters where a C# programmer would use an indexer.
In both C# and Java, an object's fields can be initialized either by , which are anonymous blocks of code with no arguments that are run after the explicit (or implicit) call to a superclass's constructor but before the constructor is executed.
C# initializes object fields in the following order when creating an object:
Some of the above fields may not be applicable (e.g. if an object does not have  is a term for the fields that are defined in one of the object's superclasses. Note that an object representation in memory contains all fields defined in its class or any of its superclasses, even, if some fields in superclasses are defined as private.
It is guaranteed that any field initializers take effect before any constructors are called, since both the instance constructor of the object's class and its superclasses are called after field initializers are called. There is, however, a potential trap in object initialization when a virtual method is called from a base constructor. The overridden method in a subclass may reference a field that is defined in the subclass, but this field may not have been initialized because the constructor of the subclass that contains field initialization is called after the constructor of its base class.
In Java, the order of initialization is as follows:
Like in C#, a new object is created by calling a specific constructor. Within a constructor, the first statement may be an invocation of another constructor. If this is omitted, the call to the argumentless constructor of the superclass is added implicitly by the compiler. Otherwise, either another overloaded constructor of the object's class can be called explicitly, or a superclass constructor can be called. In the former case, the called constructor will again call another constructor (either of the object's class or its subclass) and the chain sooner or later ends up at the call to one of the constructors of the superclass.
After another constructor is called (that causes direct invocation of the superclass constructor, and so forth, down to the Object class), instance variables defined in the object's class are initialized. Even if there are no variable initializers explicitly defined for some variables, these variables are initialized to default values. Note that instance variables defined in superclasses are already initialized by this point, because they were initialized by a superclass constructor when it was called (either by the constructor's code or by variable initializers performed before the constructor's code or implicitly to default values). In Java, variable initializers are executed according to their textual order in the source file.
Finally, the constructor body is executed. This ensures proper order of initialization, i.e. the fields of a base class finish initialization before initialization of the fields of an object class begins.
There are two main potential traps in Java's object initialization. First, variable initializers are expressions that can contain method calls. Since methods can reference any variable defined in the class, the method called in a variable initializer can reference a variable that is defined below the variable being initialized. Since initialization order corresponds to textual order of variable definitions, such a variable would not be initialized to the value prescribed by its initializer and would contain the default value. Another potential trap is when a method that is overridden in the derived class is called in the base class constructor, which can lead to behavior the programmer would not expect when an object of the derived class is created. According to the initialization order, the body of the base class constructor is executed before variable initializers are evaluated and before the body of the derived class constructor is executed. The overridden method called from the base class constructor can, however, reference variables defined in the derived class, but these are not yet initialized to the values specified by their initializers or set in the derived class constructor. The latter issue applies to C# as well, but in a less critical form since in C# methods are not overridable by default.
Both languages mainly use  and both C# and Java (since Java 7) feature automatic resource management statements that will automatically invoke the disposal/close methods on those interfaces.
Using a special  The "extension" is only active within scopes where the namespace of the static host class has been imported.
Since Java 8, Java has a similar feature called , which are methods with a body declared on interfaces. As opposed to C# extension methods, Java default methods are instance methods on the interface that declare them. Definition of default methods in classes that implement the interface is optional: If the class does not define the method, the default definition is used instead.
Both the C# extension methods and the Java default methods allow a class to override the default implementation of the extension/default method, respectively. In both languages this override is achieved by defining a method on the class that should use an alternate implementation of the method.
C# scope rules defines that if a matching method is found on a class, it takes precedence over a matching extension method. In Java any class declared to implement an interface with default method is assumed to have the default methods implementions,  the class implements the method itself.
Related to  design pattern) without paying any runtime overhead if these extension points are not being used by another class part at compile time. Java has no corresponding concept.
. However, some JVM implementations, including the Oracle reference implementation, implement inlining of the most commonly called virtual methods.
Java methods are virtual by default (although they can be  define a new, unrelated method with the same name.
This means that by default in Java, and only when explicitly enabled in C#, new methods may be defined in a derived class with the same name and signature as those in its base class. When the method is called on a superclass reference of such an object, the "deepest" overridden implementation of the ' method will be called according to the specific subclass of the object being referenced.
In some cases, when a subclass introduces a method with the same name and signature as a method already present in the , problems can occur. In Java, this will mean that the method in the derived class will implicitly override the method in the base class, even though that may not be the intent of the designers of either class.
To mitigate this, C# requires that if a method is intended to override an inherited method, the  method annotation, but it is not compulsory, and in its absence, most compilers will not provide comment (but the method will be overridden).
In Java, it is possible to prevent reassignment of a local variable or method parameter by using the 
Both languages do not support essential feature of , which makes a method constant.
Interestingly, Java defines the word "constant" arbitrarily as a .
Any C# method declared as returning .
Java does not have an equivalent feature. Instead generators are typically defined by providing a specialized implementation of a well-known collection or iterable interface, which will compute each element on demand. For such a generator to be used in a .
See also example  below.
C# also has , separate to its own class methods, or to provide different implementations for two methods with the same name and signature inherited from two base interfaces.
In either language, if a method (or property in C#) is specified with the same name and signature in multiple interfaces, the members will clash when a class is designed that implements those interfaces. An implementation will by default implement a common method for all of the interfaces. If separate implementations are needed (because the methods serve separate purposes, or because return values differ between the interfaces) C#'s explicit interface implementation will solve the problem, though allowing different results for the same method, depending on the current cast of the object. In Java there is no way to solve this problem other than refactoring one or more of the interfaces to avoid name clashes.
The arguments of primitive types (e.g. int, double) to a method are passed by value in Java. The objects are passed by reference. This means that a method operates on copies of the primitives passed to it instead of on the actual variables. On the contrary, the actual objects in some cases can be changed. In the following example object String is not changed. Object of class 'a' is changed.
In C#, it is possible to enforce a reference with the 
Java supports  clause.
Checked exceptions can encourage good programming practice, ensuring that all errors are dealt with. However 
One criticism is that checked exceptions encourage programmers to use an empty catch block (, since the caller may not need to know the inner workings of the object.
However, not all programmers agree with this stance. James Gosling and others maintain that checked exceptions are useful, and misusing them has caused the problems. Silently catching exceptions is possible, yes, but it must be stated explicitly what to do with the exception, versus unchecked exceptions that allow doing nothing by default. It can be ignored, but code must be written explicitly to ignore it.
There are also differences between the two languages in treating the  block.
A common reason for using  is always called.
A rather subtle difference is the moment a stack trace is created when an exception is being thrown. In Java, the stack trace is created in the moment the exception is created.
The exception in the statement above will always contain the constructor's stack-trace - no matter how often foo is called. In C# on the other hand, the stack-trace is created the moment "throw" is executed.
In the code above, the exception will contain the stack-trace of the first throw-line. When catching an exception, there are two options in case the exception should be rethrown:  would have created a new stack trace.
Java allows flow of control to leave the ) to be terminated mid-execution. For example:
In the above code, the  returns 1.
C# does not allow any statements that allow control flow to leave the  block.
In the field of  the two languages show a superficial syntactical similarity, but they have deep underlying differences.

The language specification intentionally prohibits certain uses of generics; this is necessary to allow for implementing generics through 
C# builds on support for generics from the virtual execution system, i.e., it is not just a language feature. The language is merely a front-end for cross-language generics support in the  code. Different sets of reference types will still have unique type descriptors; their method tables will merely point to the same code.
The following list illustrates some differences between Java and C# when managing generics. It is not exhaustive:
C# allows generics directly for primitive types. Java, instead, allows the use of boxed types as type parameters (e.g., 
Java's type erasure design was motivated by a design requirement to achieve 
C# generics were introduced into the language while preserving full backward compatibility, but did not preserve full .
Covariance and contravariance is supported by both languages. Java has use-site variance that allows a single generic class to declare members using both co- and contravariance. C# has define-site variance for generic interfaces and delegates. Variance is unsupported directly on classes but is supported through their implementation of variant interfaces. C# also has use-site covariance support for methods and delegates.
A closure is an inline function that captures variables from its lexical scope.
C# supports closures as anonymous methods or 
In Java, anonymous inner classes will remain the preferred way to emulate closures until Java 8 has become the new standard. This is a more verbose construction. This approach also has some differences compared to real closures, notably more controlled access to variables from the enclosing scopes: only final members can be referenced. Java 8, however introduces lambdas that fully inherit the current scope and, in fact, do not introduce a new scope.
When a reference to a method can be passed around for later execution, a problem arises about what to do when the method has references to variables/parameters in its lexical scope. C# closures can access any variable/parameter from its lexical scope. In Java's anonymous inner classes, only references to final members of the lexical scope are allowed, thus requiring the developer to mark which variables to make available, and in what state (possibly requiring boxing).
C# and Java feature a special type of in-line .
C#, unlike Java, allows the use of lambda functions as a way to define special data structures called expression trees. Whether they are seen as an executable function or as a data structure depends on compiler  (LINQ).
In C#,  names in Java, a namespace is not in any way tied to the location of the source file. While it is not strictly necessary for a Java source file location to mirror its package directory structure, it is the conventional organization.
Both languages allow importing of classes (e.g., .
Java has a ).
The  keyword in the source code. In Java, a public class will always be in its own source file. In C#, source code files and logical units separation are not tightly related.
Unlike Java, C# implements  switch when invoking the JVM.
Both languages include thread  mechanisms as part of their language syntax.
With .NET Framework 4.0, a new task-based programming model was introduced to replace the existing event-based asynchronous model. The API is based around the  classes. Tasks can be composed and chained.
By convention, every method that returns a .
In C# 5 a set of language and compiler extensions was introduced to make it easier to work with the task model. These language extensions included the notion of  statement that make the program flow appear synchronous.
From this  the C# compiler generates a state-machine that handles the necessary continuations without developers having to think about it.
Java supports Threads since JDK 1.0. Java offers a high versatility for running threads, often called tasks. This is done by implementing a functional interface (a  interface) defining a single void no-args method as demonstrated in the following example:
Also, it's possible extending  as below:
Similar to C#, Java has since version 5 a higher level replacement for working with threads directly.  are capable of running asynchronous tasks and typically manage a pool of threads. All threads of the internal pool will be reused under the hood for revenant tasks, so we can run as many concurrent tasks as we want throughout the life-cycle of our application with a single executor service.
This is how the first thread-example looks like using executors:
In addition to  but returns a value.
Calling the method  blocks the current thread and waits until the callable completes before returning the value (in the example, a web page content):
A better practice could be ask to the users waiting while the task is completed:
To adequately support applications in the field of mathematical and financial computation, several language features exist.
Javas 
Although Java's floating point arithmetic is largely based on IEEE 754 (Standard for Binary Floating-Point Arithmetic), certain features are unsupported even when using the strictfp modifier, such as Exception Flags and Directed Roundings, abilities mandated by IEEE Standard 754 (see ).
C# provides a built-in decimal type, The structure uses C# operator overloading so that decimals can be manipulated using operators such as +, -,*and /, like other primitive data types.
The  types provided with Java allow arbitrary-precision representation of decimal numbers and integer numbers, respectively. Java standard library does not have classes to deal with complex numbers.
The BigInteger,).
C# can help mathematical applications with the  for a region of code.
C#s  (LINQ) is a set of features designed to work together to allow in-language querying abilities and is a distinguishing feature between C# and Java.
LINQ consists of the following features:
The  (JNA) allows easier calling of native code that only requires writing Java code, but comes at a performance cost.
In addition, third party ).
.NET Platform Invoke (, thus avoiding the external glue code needed by the equivalent JNI in Java. P/Invoke allows almost complete access to procedural APIs (such as Win32 or POSIX), but limited access to C++ class libraries.
In addition, .NET Framework also provides a .NET-COM bridge, allowing access to COM components as, if they were first-class .NET objects.
C# also allows the programmer to disable the normal type-checking and other safety features of the  keyword. JNI, P/Invoke, and "unsafe" code are equally risky features, exposing possible security holes and application instability. An advantage of unsafe, managed code over P/Invoke or JNI is that it allows the programmer to continue to work in the familiar C# environment to accomplish some tasks that otherwise would require calling out to unmanaged code. An assembly (program or library) using unsafe code must be compiled with a special switch and will be marked as such. This enables runtime environments to take special precautions before executing potentially harmful code.
Java (the programming language) is designed to execute on the Java platform via the . Upon execution the bytecode is loaded by the Java runtime and either interpreted directly or compiled to machine instructions and then executed.
C# is designed to execute on the  instructions. Upon execution the runtime loads this code and compiles to machine instructions on the target architecture.
Example illustrating how to copy text one line at a time from one file to another, using both languages.
C# allows library-defined types to be integrated with existing types and operators by using custom implicit/explicit conversions and operator overloading as illustrated by the following example:
This example illustrates how Java and C# can be used to create and invoke an instance of class that is implemented in another programming language. The "Deepthought" class is implemented using the  method is invoked.
Notes for the Java implementation:
Notes for the C# implementation:
This example illustrates how the  for code formatting of classes, methods and statements.
