In  to cache the results of expensive computations could still be considered an immutable object.
Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in 


In  to several decimal places.
Sometimes, one talks of certain  to be so.
In most . In this case, it matters whether the state of an object can vary when objects are shared via references.
If an object is known to be immutable, it can be copied simply by making a copy of a ) is usually much smaller than the object itself, this results in memory savings and a potential boost in execution speed.
The reference copying technique is much more difficult to use for mutable objects, because if any user of a reference to a mutable object changes it, all other users of that reference will see the change. If this is not the intended effect, it can be difficult to notify the other users to have them respond correctly. In these situations,  is an alternative technique for handling changes to mutable objects.
A technique that blends the advantages of  systems because it allows them to save memory space while still correctly handling anything an application program might do.
The practice of always using references in place of copies of equal objects is known as  case improvement when the objects are equal and use the same reference.) Interning is generally only useful for immutable objects.
Immutable objects can be useful in multi-threaded applications. Multiple threads can act on data represented by immutable objects without concern of the data being changed by other threads. Immutable objects are therefore considered to be more  than mutable objects.
Immutability does not imply that the object as stored in the computer's ).
In 
Additionally, all of the  in Java are immutable.
Similar patterns are the .
In pure ), so all objects are immutable.
In  keyword.
Subprogram parameters are immutable in the  modes.
In  statement. By enforcing all the fields to be immutable, you will obtain an immutable type.
In C++, a  instances.)
Note that, if there were a field that is a pointer or reference to another object, then it might still be possible to mutate the object pointed to by such a pointer or reference within a const method, without violating const-correctness. It can be argued that in such a case the object is not really immutable.
C++ also provides abstract (as opposed to bitwise) immutability via the  method.
A classic example of an immutable object is an instance of the Java  class
The method  contain the data "abc", a different approach is needed.
Now the String  of the class String that enforces it as immutable; rather, none of the String class's methods ever affect the data that a String object contains, thus making it immutable.
The keyword  immutable. See below examples:
Primitive type variables (.
Reference types cannot be made immutable just by using the  only prevents reassignment.
Primitive wrappers (
In , one can create an immutable class with the Moo library by simply declaring all the attributes to be read only:
Creating an immutable class used to require two steps: first, creating accessors (either automatically or manually) that prevent modification of object attributes, and secondly, preventing direct modification of the instance data of instances of that class (this was usually stored in a hash reference, and could be locked with Hash::Util's lock_hash function):
Or, with a manually written accessor:
In , some built-in types (numbers, booleans, strings, tuples, frozensets) are immutable, but custom classes are generally mutable. To simulate immutability in a class, one should override attribute setting and deletion to raise exceptions:
The standard library helper  creates simple immutable classes:
is roughly equivalent to the above, plus some tuple-like features.
In  to make existing objects immutable.
 etc. In addition, many immutable types are supported, for example, immutable strings and vectors, and these are used extensively. New structs are immutable by default, unless a field is specifically declared mutable, or the whole struct:
The language also supports immutable hash tables, implemented functionally, and immutable dictionaries.
In  may be mutable.
For example, the following code snippet:
defines an immutable entity .
By default, collection classes such as 

