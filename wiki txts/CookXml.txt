 schema. The current implementation has unmarshalling part done.
CookXml is  style, licence.


CookXml offers the ability to directly map XML documents onto existing classes by breaking down the process into three general steps. Then use a set of , together forming a tag library, to handle actions performed at these steps.
Except for  nodes, the three above types of actions can handle all elements in an XML document. CDATA in general can be handled either in the creator function or the adder function.
Creators, setters, adders, and converters together form a tag library which is used by the CookXml engine to perform the XML data binding.
Because the CookXml tag library uses delegates, its tag library needs to be dynamically constructed. This feature is both good and bad. It is bad because there will be a slight initiation cost when the tag library is constructed, and its integrity may not be verified until runtime. It is good because it allows developers to easily extend an existing tag library at runtime.
Like any trees that can be traversed in preorder and postorder, the object corresponding to an XML element can be added to the parent object in preorder or postorder. In the preorder addition, the object is added to the parent before descendant XML elements get processed. In the postorder addition, the object is added to the parent after descendant XML elements get processed.
One discovery made while writing CookXml was that class inheritance of Object-oriented languages can be mirrored into XML element tag inheritance. Semantically, tag inheritance means that the derived tag will inherit the setters and adders of the inherited tags.
For example, javax.swing.JMenu is a child class of javax.swing.JMenuItem. Assuming that javax.swing.JMenu is mapped to &lt;menu&gt; tag and javax.swing.JMenuItem is mapped to &lt;menuitem&gt; tag, then we can declare in CookXml that &lt;menu&gt; tag inherits &lt;menuitem&gt; tag. &lt;menu&gt; tag then inherits the setters for attributes such as "text" and "icon" of the &lt;menuitem&gt; tag.
Polymorphism of  can be mirrored in XML tag inheritance as well. Class casting is similar to dynamically renaming the current namespace and the tag of the element being processed.
XML tag inheritance is a methodology not present in any other XML data binding tools. This feature is immensely useful in mapping XML documents to classes with a deep inheritance hierarchy, typically found in  classes.
Since version 3.0, CookXml is capable of dealing with XML documents with multiple namespaces. For backward compatibility, CookXml also parse XML documents without namespaces or partially utilizing namespaces.
As of version 3.0, CookXml operates on top of the XML DOM tree to map an XML document to objects. This feature allows developers to utilize XML schema if such exists to verify the incoming XML documents. On the other hand, the memory consumption for a large XML document can be problematic.
Since a tag library for CookXml contains all the mappings between an XML element and its corresponding object classes, it is entirely possible to use this map to generate documentations from this feature. The documentation output can be HTML documents, or XML Schemas.
CookXmlDoc, a doclet API for CookXml can extract  for an example.
Streaming is a key feature that is under consideration. Such capability would reduce the memory consumption due to the construction of the DOM tree as well as improving the overall performance.
