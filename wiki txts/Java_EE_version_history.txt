The  or Java EE (formerly known as Java 2 Platform, Enterprise Edition or J2EE) has undergone several changes since 1.0 as well as numerous additions of new specifications.


Announcement of the JPE (Java Professional Edition) project at Sun.
J2EE 1.3 abandoned support for the heavy-weight distributed object model(RMI-IIOP/CORBA) entirely, in favor of XML-based solution. Added JavaServer Pages Standard Tag Library (JSTL), Java Authentication and Authorization Service (JAAS) and J2EE Connector Architecture.
In response to emerging web services, J2EE 1.4 added XML-based web services support. This version also added component-based JavaServer Faces (JSF) technology intended to replace JSP.
In response to the complaints and heavyweight troublesome impression about J2EE (1.2, 1.3, 1.4) when developers reluctantly use and light-weight Spring/Struts/Hibernate framework is increasingly popular, J2EE was rebranded as Java EE 5 which comes in line with Java SE 1.5, trying to make EJB lighter weight by replacing entity bean with independent JPA. It also added Java API for XML-based Web Services (JAX-WS) and SOAP with Attachments API for Java (SAAJ), with the former text-based and asynchronous, the latter either binary-based or text-based but synchronous which is intended to be a simpler replacement for RMI-IIOP/CORBA.
Starting from Java EE 6, Java EE is trying to incorporate and standardize concepts/features from and merge with Spring framework. The SOAP with Attachments API for Java (SAAJ) is now part of Java SE 6, and is thus available to Java EE 6 applications without needing to be included in the EE specification. Java EE 6 also standardized DI, AOP and others from Spring into Contexts and Dependency Injection for Java, Dependency Injection for Java, Bean Validation, Managed Beans, and Interceptors.
Java EE 6 introduced the concept of profile, which represents a configuration of the platform suited to a particular class of applications. The Web Profile offers a complete stack, with technologies addressing presentation and state management (JavaServer Faces, JavaServer Pages), core web container functionality (Servlet), business logic (Enterprise JavaBeans Lite), transactions (Java Transaction API), persistence (Java Persistence API) and more.
Java EE 6 also started pruning process which would prune and deprecate old and unused APIs.
Java EE 6 was first going to be developed under  and released on December 10, 2009.
The development was plagued with controversy, although passed by 14 yes votes, 1 no vote (Apache), and 1 abstention (Borland), members aired concerns relating to the licensing terms applied by Sun Microsystems.
IBM's "yes" vote was caveated with:
Intel's was caveated with:
Red Hat commented:
Apache voted NO with the following comment:
In keeping up with the HTML5 trend, Java EE 7 added Java API for WebSocket, Java API for JSON Processing, and Servlet async and non-blocking NIO which was a primary reason Play Framework was started. In response to emerging big data trend, Java EE 7 added a complete solution for Batch Applications for the Java Platform. Java EE 7 also added features trying to make developer's life easier, improving developer's productivity.
The main focus of Java EE 8 is on support for HTML5 and the emerging HTTP 2.0 standard; enhanced simplification and managed bean integration; and improved infrastructure for applications running in the cloud, continuing the direction of improved simplification, while extending the range of the Java EE platform to encompass emerging technologies in the web space and in cloud technology.
In accordance with the pruning process defined by the Java EE 6 specification, it is considered designating the following as Proposed Optional in this release:
