 language, requires the Java platform, and is best suited to building Java projects.
The most immediately noticeable difference between Ant and Make is that Ant uses .
Ant is an .


Ant ("Another Neat Tool", but in the open source world there was no way of controlling which platform was used to build Tomcat; so Ant was created as a simple platform-independent tool to build Tomcat from directives in an XML "build file". Ant (version 1.1) was officially released as a stand-alone product on July 19, 2000.
Several proposals for an Ant version 2 have been made, such as AntEater by James Duncan Davidson, Myrmidon by 
At one time (2002), Ant was the build tool used by most Java development projects.
Because Ant made it trivial to integrate .
WOProject-Ant suite.
Antcontrib
Ant-contrib.unkrig.de processing and other.
Other task extensions exist for 
Below is listed a sample  target.
Within each target are the actions that Ant must take to build that target; these are performed using built-in tasks. For example, to build the  . These perform a similar task to the command-line utilities of the same name.
Another task used in this example is named  :
This Ant task has the same name as the common Java command-line utility, JAR, but is really a call to the Ant program's built-in JAR/ZIP file support. This detail is not relevant to most end users, who just get the JAR they wanted, with the files they asked for.
Many Ant tasks delegate their work to external programs, either native or Java. They use Ant's own  ), by trying to execute the task on a system without the underlying program on the path, or without a full Java Development Kit (JDK) installed.
One of the primary aims of Ant was to solve Make's portability problems. The first portability issue in a Makefile is that the actions required to create a target are specified as  directory and everything in it. In a Makefile this would typically be done with the command:
, for example, would use:
In an Ant build file the same goal would be accomplished using a built-in command:
A second portability issue is a result of the fact that the symbol used to delimit elements of file system directory path components differs from one platform to another. Unix uses a forward slash (/) to delimit components whereas Windows uses a backslash (\). Ant build files let authors choose their favorite convention: forward slash or backslash for directories; semicolon or colon for path separators. It converts each to the symbol appropriate to the platform on which it executes.
There exists a myriad of third-party Ant extensions (called  IDE uses Ant for its internal build system. As both these IDEs are very popular development platforms, they can simplify Ant use significantly. (As a bonus, Ant scripts generated by NetBeans can be used outside that IDE as standalone scripts.)

